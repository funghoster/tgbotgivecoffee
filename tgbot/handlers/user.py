from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


from tgbot.config import load_config

from ..misc import db
from ..keyboards import inline

class CommandBot:
    config = load_config(".env")
    bot = Bot(token=config.tg_bot.token, parse_mode='HTML')

class NewName(StatesGroup):
    waiting_for_new_name = State()
class NewCenter(StatesGroup):
    waiting_for_new_center = State()
class NewDescr(StatesGroup):
    waiting_for_new_descr = State()

async def user_start(message: types.Message):
    if(not await db.user_exists(message.from_user.id)):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=inline.button_case_registration)
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å. –í–≤–µ–¥–∏ \"–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å\", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±–æ—Ç—ã –∏ –æ —Ç–æ–º, –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ç–æ—á–∫–µ", reply_markup=inline.button_case_menu)

async def drinks_start(message: types.Message,):
    if(not await db.user_exists(message.from_user.id)):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=inline.button_case_registration)
        return
    if(not db.get_worker_working(True)):
        
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–∏ –∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=inline.button_case_menu)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=inline.button_case_select_drink)

async def user_profile(message: types.Message,):
    if(not await db.user_exists(message.from_user.id)):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=inline.button_case_registration)
        return
    record = db.get_user_info(message.from_user.id)
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                        f"üë§–ò–º—è: {record[2]}\n"
                        f"üè†–¢–¶: {record[0]}\n"
                        f"üìù–û–ø–∏—Å–∞–Ω–∏–µ: {record[1]}\n"
                        f"üóì–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(record[3])}\n"
                        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"/editprofile\" –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ", reply_markup=inline.button_case_menu)

async def user_edit_profile(message: types.Message,):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=inline.button_case_edit_profile)

# –§—É–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def edit_name(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(NewName.waiting_for_new_name.state)
 
async def set_new_name(message: types.Message, state: FSMContext):
    db.add_record_name(message.text, message.from_user.id)
    await message.answer("–°–¥–µ–ª–∞–Ω–æ", reply_markup=inline.button_case_menu)
    await state.finish()
#------
# –§—É–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def edit_center(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä: ", reply_markup=inline.button_case_select_center)
    await state.set_state(NewCenter.waiting_for_new_center.state)
 
async def set_new_center(message: types.Message, state: FSMContext):
    db.add_record_center(message.text, message.from_user.id)
    await message.answer("–°–¥–µ–ª–∞–Ω–æ", reply_markup=inline.button_case_menu)
    await state.finish()
#------
# –§—É–Ω—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def edit_info(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: ", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(NewDescr.waiting_for_new_descr.state)
 
async def set_new_info(message: types.Message, state: FSMContext):
    db.add_record_description(message.text, message.from_user.id)
    await message.answer("–°–¥–µ–ª–∞–Ω–æ", reply_markup=inline.button_case_menu)
    await state.finish()
#------





async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=inline.button_case_menu)

    
def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start", "menu"], state="*")
    dp.register_message_handler(user_start, Text(equals="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ignore_case=True), state="*")
    dp.register_message_handler(drinks_start, commands="neworder", state="*")
    dp.register_message_handler(drinks_start, Text(equals="–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏", ignore_case=True), state="*")
    dp.register_message_handler(user_profile, Text(equals="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", ignore_case=True), state="*")
    dp.register_message_handler(user_edit_profile, commands="editprofile", state="*")
    dp.register_message_handler(user_edit_profile, Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", ignore_case=True), state="*")
    dp.register_message_handler(edit_name, Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", ignore_case=True), state="*")
    dp.register_message_handler(set_new_name, state=NewName.waiting_for_new_name)
    dp.register_message_handler(edit_info, Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", ignore_case=True), state="*")
    dp.register_message_handler(set_new_info, state=NewDescr.waiting_for_new_descr)
    dp.register_message_handler(edit_center, Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", ignore_case=True), state="*")
    dp.register_message_handler(set_new_center, state=NewCenter.waiting_for_new_center)
    dp.register_message_handler(cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")